package me.tedyoung.blog.junit_runtime_tests.part2;

import java.lang.reflect.Method;

import org.junit.runners.model.FrameworkMethod;

class FrameworkFactoryTest extends FrameworkMethod {
	private Object target;
	private String name;

	public FrameworkFactoryTest(Method method, Object target, String name) {
		super(method);
		this.target = target;
		this.name = name;
	}

	@Override
	public Object invokeExplosively(Object target, Object... params) throws Throwable {
		// Executes the test method on the supplied target (returned by the TestFactory)
		// and not the instance generated by FrameworkMethod.
		return super.invokeExplosively(this.target, params);
	}

	@Override
	public String getName() {
		return String.format("%s=%s.%s[%s]", name, target.getClass().getSimpleName(), getMethod().getName(), target.toString());
	}
}
